<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.baseball.infra.shop.ShopDao">

	<resultMap type="com.baseball.infra.shop.ShopDto" id="resultMapObj"></resultMap>
	
	<!-- paging -->
	<sql id="shopSelectCommon">
		FROM
			bears.b_shop a
			LEFT JOIN (
				SELECT 
					b_shop_nsSeq,
					AVG(reStar) AS average_star,
		            COUNT(*) AS review_count
				FROM
					b_review
				GROUP BY b_shop_nsSeq
			) AS avg_table On a.nsSeq = avg_table.b_shop_nsSeq
		WHERE 1 = 1
			AND a.nsSeq = nsSeq
			<!-- 삭제여부 -->
			<if test="shDelNy != null and !shDelNy.equals('')">AND nsDelNy = #{shDelNy}</if>
			<!-- 동시시술인원 -->
			<choose>
				<when test="shMulti == 1">AND nsMulti = 1</when>
				<when test="shMulti == 2">AND nsMulti = 2</when>
				<when test="shMulti == 3">AND nsMulti = 3</when>
				<when test="shMulti == 4">AND nsMulti = 4</when>
				<when test="shMulti == 5">AND nsMulti = 5</when>
				<when test="shMulti == 6">AND nsMulti = 6</when>
				<when test="shMulti == 7">AND nsMulti = 7</when>
				<when test="shMulti == 8">AND nsMulti = 8</when>
				<when test="shMulti == 9">AND nsMulti = 9</when>
				<when test="shMulti == 10">AND nsMulti = 10</when>
			</choose>
			<!-- 지역구 -->
			<choose>
				<when test="shAddrCode == 1">AND nsAddrCode = 1</when>
				<when test="shAddrCode == 2">AND nsAddrCode = 2</when>
				<when test="shAddrCode == 3">AND nsAddrCode = 3</when>
				<when test="shAddrCode == 4">AND nsAddrCode = 4</when>
				<when test="shAddrCode == 5">AND nsAddrCode = 5</when>
				<when test="shAddrCode == 6">AND nsAddrCode = 6</when>
				<when test="shAddrCode == 7">AND nsAddrCode = 7</when>
			</choose>
			<!-- 별점 -->
			<choose>
				<when test="shStar == 1">AND nsStar = 1</when>
				<when test="shStar == 2">AND nsStar = 2</when>
				<when test="shStar == 3">AND nsStar = 3</when>
				<when test="shStar == 4">AND nsStar = 4</when>
				<when test="shStar == 5">AND nsStar = 5</when>
			</choose>
			<!-- 주차가능여부 -->
			<if test="shAddParkingNy != null and !shAddParkingNy.equals('')">AND nsAddParkingNy = #{shAddParkingNy}</if>
			<!-- 반려동물 동반가능여부 -->
			<if test="shAddDogNy != null and !shAddDogNy.equals('')">AND nsAddDogNy = #{shAddDogNy}</if>
			<!-- 이달의아트 가능여부 -->
			<if test="shAddArtOfMonthNy != null and !shAddArtOfMonthNy.equals('')">AND nsAddArtOfMonthNy = #{shAddArtOfMonthNy}</if>
			<!-- 드릴케어 가능여부 -->
			<if test="shAddDrillcareNy != null and !shAddDrillcareNy.equals('')">AND nsAddDrillcareNy = #{shAddDrillcareNy}</if>
			<!-- 습식케어 가능여부 -->
			<if test="shAddWetcareNy != null and !shAddWetcareNy.equals('')">AND nsAddWetcareNy = #{shAddWetcareNy}</if>
			<!-- 날짜 검색 -->
			<choose>
				<when test="shDateOption == 1">AND nsRegDate BETWEEN #{shStartDate} AND #{shEndDate}</when>
				<when test="shDateOption == 2">AND nsEditDate BETWEEN #{shStartDate} AND #{shEndDate}</when>
			</choose>
			<!-- 키워드검색 -->
			<choose>
				<when test="shOption == 1">AND nsSeq = #{shValue}</when>
				<when test="shOption == 2">AND nsName LIKE CONCAT('%',#{shValue},'%')</when>
				<when test="shOption == 3">AND nsTel LIKE CONCAT('%',#{shValue},'%')</when>
				<when test="shOption == 4">AND nsOwnerName LIKE CONCAT('%',#{shValue},'%')</when>
				<when test="shOption == 5">AND nsOwnerTel LIKE CONCAT('%',#{shValue},'%')</when>
				<when test="shOption == 6">AND nsInfoPrice LIKE CONCAT('%',#{shValue},'%')</when>
			</choose>
	</sql>
	
	<select id="shopSelectOneCount">
		SELECT COUNT(*)
		<include refid="shopSelectCommon"/>
	</select>
	
	
	<!-- shopSelectList - list 페이지 데이터 불러오기 -->
	<select id="shopSelectList" resultMap="resultMapObj">
		SELECT aa.* FROM(
			SELECT
				a.nsSeq,
				a.nsName,
			    a.nsTel,
			    a.nsOwnerName,
				a.nsOwnerTel,
				a.nsOpenTime,
				a.nsClosTime,
				a.nsMulti,
				a.nsLogo,
				a.nsGallery,
				a.nsInfoText,
				a.nsZipCode,
				a.nsAddr,
				a.nsAddrDetail,
			    a.nsAddrCode,
				a.nsInfoWalk,
				a.nsInfoPrice,
				a.nsInfoEvent,
				a.nsInfoDetail,
				a.nsAddParkingNy,
				a.nsAddDogNy,
				a.nsAddArtOfMonthNy,
				a.nsAddDrillcareNy,
				a.nsAddWetcareNy,
				a.nsStar,
				a.nsRegDate,
				a.nsEditDate,
				a.nsDelNy,
				avg_table.average_star,
    			avg_table.review_count,
    			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 1) as mainImg1, 
				(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 2) as mainImg2, 
				(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 3) as subImg1, 
				(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 4) as subImg2, 
				(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 5) as subImg3, 
				(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 6) as subImg4, 
				(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 7) as subImg5, 
				(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 8) as subImg6, 
				(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 9) as subImg7, 
				(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 10) as subImg8, 
				(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 11) as subImg9,
				(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 12) as subImg10
			<include refid="shopSelectCommon"/>
			ORDER BY
				a.nsSeq DESC
		) aa limit #{rowNumToShow} offset #{startRnumForMySql}
	</select>
	
	<!-- shopInsert - form 페이지 데이터 입력하기 -->
	<insert id="shopInsert">
		INSERT INTO b_shop (
			nsName,
		    nsTel,
		    nsOwnerName,
			nsOwnerTel,
			nsOpenTime,
			nsClosTime,
			nsMulti,
			nsInfoText,
			nsZipCode,
			nsAddr,
			nsAddrDetail,
		    nsAddrCode,
			nsInfoWalk,
			nsInfoPrice,
			nsInfoEvent,
			nsInfoDetail,
			nsAddParkingNy,
			nsAddDogNy,
			nsAddArtOfMonthNy,
			nsAddDrillcareNy,
			nsAddWetcareNy,
			nsStar,
			nsRegDate,
			nsEditDate,
			nsDelNy
		) values (
		    #{nsName},
		    #{nsTel},
		    #{nsOwnerName},
			#{nsOwnerTel},
			#{nsOpenTime},
			#{nsClosTime},
			#{nsMulti},
			#{nsInfoText},
			#{nsZipCode},
			#{nsAddr},
			#{nsAddrDetail},
		    #{nsAddrCode},
			#{nsInfoWalk},
			#{nsInfoPrice},
			#{nsInfoEvent},
			#{nsInfoDetail},
			#{nsAddParkingNy},
			#{nsAddDogNy},
			#{nsAddArtOfMonthNy},
			#{nsAddDrillcareNy},
			#{nsAddWetcareNy},
			0,
			now(),
		    now(),
		    0
		)
		<selectKey resultType="String" keyProperty="nsSeq" order="AFTER">
			SELECT last_insert_id()
		</selectKey>
	</insert>
	
	<!-- shopSelectOne - Mfom 페이지에서 데이터 불러오기 -->
	<select id="shopSelectOne" resultMap="resultMapObj">
		SELECT
			a.nsSeq,
			a.nsName,
		    a.nsTel,
		    a.nsOwnerName,
			a.nsOwnerTel,
			a.nsOpenTime,
			a.nsClosTime,
			a.nsMulti,
			a.nsLogo,
			a.nsGallery,
			a.nsInfoText,
			a.nsZipCode,
			a.nsAddr,
			a.nsAddrDetail,
		    a.nsAddrCode,
			a.nsInfoWalk,
			a.nsInfoPrice,
			a.nsInfoEvent,
			a.nsInfoDetail,
			a.nsAddParkingNy,
			a.nsAddDogNy,
			a.nsAddArtOfMonthNy,
			a.nsAddDrillcareNy,
			a.nsAddWetcareNy,
			a.nsStar,
			a.nsRegDate,
			a.nsEditDate,
			a.nsDelNy,
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 1) as mainImg1, 
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 2) as mainImg2, 
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 3) as subImg1, 
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 4) as subImg2, 
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 5) as subImg3, 
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 6) as subImg4, 
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 7) as subImg5, 
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 8) as subImg6, 
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 9) as subImg7, 
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 10) as subImg8, 
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 11) as subImg9,
			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = a.nsSeq and aa.nsfOrder = 12) as subImg10
		FROM
			bears.b_shop a
		WHERE 1 = 1
			AND a.nsSeq = #{nsSeq}
	</select>
	
	<!-- shopUpdate - Mfom 페이지에서 데이터 수정하기 -->
	<update id="shopUpdate">
		UPDATE bears.b_shop
		SET
			nsName = #{nsName},
		    nsTel = #{nsTel},
		    nsOwnerName = #{nsOwnerName},
			nsOwnerTel = #{nsOwnerTel},
			nsOpenTime = #{nsOpenTime},
			nsClosTime = #{nsClosTime},
			nsMulti = #{nsMulti},
			nsInfoText = #{nsInfoText},
			nsZipCode = #{nsZipCode},
			nsAddr = #{nsAddr},
			nsAddrDetail = #{nsAddrDetail},
		    nsAddrCode = #{nsAddrCode},
			nsInfoWalk = #{nsInfoWalk},
			nsInfoPrice = #{nsInfoPrice},
			nsInfoEvent = #{nsInfoEvent},
			nsInfoDetail = #{nsInfoDetail},
			nsAddParkingNy = #{nsAddParkingNy},
			nsAddDogNy = #{nsAddDogNy},
			nsAddArtOfMonthNy = #{nsAddArtOfMonthNy},
			nsAddDrillcareNy = #{nsAddDrillcareNy},
			nsAddWetcareNy = #{nsAddWetcareNy},
			nsStar = #{nsStar},
			nsDelNy = 0
		WHERE 1 = 1
			AND nsSeq = #{nsSeq}
	</update>
	
	<!-- shopUelete - Mfom 페이지에서 삭제여부 수정하기(수정삭제) -->
	<update id="shopUelete">
		UPDATE bears.b_shop
		SET
			nsDelNy = 1
		WHERE 1 = 1
			AND nsSeq = #{nsSeq}
	</update>
	
	<!-- shopDelete - Mfom 페이지에서 삭제 -->
	<delete id="shopDelete">
		DELETE FROM bears.b_shop
		WHERE 1 = 1
			AND nsSeq = #{nsSeq}
	</delete>
	
	<!-- 파일 업로드 -->
	<insert id="insertUploaded">
		INSERT INTO b_shopuploaded (
			nsfType,
			nsfDefaultNy,
			nsfSort,
			nsfPath,
			nsfOriginalName,
			nsfUuidName,
			nsfExt,
			nsfSize,
			nsfDelNy,
			nsfPseq,
			nsfOrder,
			nsfRegIp,
			nsfRegSeq,
			nsfRegDeviceCd,
			nsfRegDateTime,
			nsfRegDateTimeSvr
		) VALUES (
			#{nsfType},
			#{nsfDefaultNy},
			#{nsfSort},
			#{nsfPath},
			#{nsfOriginalName},
			#{nsfUuidName},
			#{nsfExt},
			#{nsfSize},
			0,
			#{nsfPseq},
			#{nsfOrder},
			#{nsfRegIp},
			#{nsfRegSeq},
			#{nsfRegDeviceCd},
			#{nsfRegDateTime},
			#{nsfRegDateTimeSvr}
		)
	</insert>
	
	<!-- 리뷰리스트 출력 -->
	<select id="shopReviewSelectList" resultMap="resultMapObj">
		SELECT 
			c.reSeq,
		    c.b_shop_nsSeq,
		    b.nsName,
		    c.b_user_usrSeq,
		    a.usrId,
		    c.reTitle,
		    c.reContent,
		    c.reStar,
		    c.reRegDate,
		    c.reEditDate,
		    c.reDelNy    
		FROM 
			b_review AS c
			LEFT JOIN b_user AS a
				ON c.b_user_usrSeq = a.usrSeq
			LEFT JOIN b_shop AS b
				ON c.b_shop_nsSeq = b.nsSeq
		WHERE 1 = 1 
			AND b.nsSeq = #{nsSeq}
		ORDER BY 
			c.reSeq DESC
	</select>
	
	<!-- 별점 평균값 구하기 -->
	<select id="getAverageStar" resultMap="resultMapObj">
		SELECT 
			b.nsSeq,
		    b.nsName,
		    AVG(c.reStar) as average_star
		FROM 
			b_review AS c
			LEFT JOIN b_user AS a
				ON c.b_user_usrSeq = a.usrSeq
			LEFT JOIN b_shop AS b
				ON c.b_shop_nsSeq = b.nsSeq
		WHERE 1 = 1 
			AND b.nsSeq = #{nsSeq}
	</select>
	
	<!-- shopMenuSelectList - list 페이지 데이터 불러오기 -->
	<select id="shopMenuSelectList" resultMap="resultMapObj">
		SELECT bb.* FROM(
			SELECT 
				c.meSeq, 
			   	a.nsName,
				c.meName, 
				c.meDesc, 
				c.meTime, 
				c.mePrice, 
				c.meCount, 
				c.meUseNy, 
				c.meDelNy, 
				c.b_shop_nsSeq
			<include refid="shopMenuSelectCommon"></include>
			ORDER BY c.meSeq ASC
		) bb limit #{rowNumToShow} offset #{startRnumForMySql}
	</select>
	
	<!-- paging -->
	<sql id="shopMenuSelectCommon">
		FROM b_menu AS c
			LEFT JOIN b_shop AS a
				ON c.b_shop_nsSeq = a.nsSeq
		WHERE 1 = 1
			<!-- 삭제여부 -->
			<if test="shMeDelNy != null and !shMeDelNy.equals('')">AND meDelNy = #{shMeDelNy}</if>
			<!-- 날짜 검색 -->
			<choose>
				<when test="shDateOption == 1">AND nsRegDate BETWEEN #{shStartDate} AND #{shEndDate}</when>
				<when test="shDateOption == 2">AND nsEditDate BETWEEN #{shStartDate} AND #{shEndDate}</when>
			</choose>
			<!-- 키워드검색 -->
<!-- 			<choose> -->
<!-- 				<when test="shOption == 1">AND nsSeq = #{shValue}</when> -->
<!-- 			</choose> -->
	</sql>
	
	<select id="shopMenuSelectOneCount">
		SELECT COUNT(*)
		<include refid="shopMenuSelectCommon"/>
	</select>
	
	<!-- ShopMenu에 Shop 연결 -->
	<select id="selectListShop" resultMap="resultMapObj">
		SELECT
			a.nsSeq,
			a.nsName
		FROM
			b_shop a
		WHERE 1 = 1
			AND a.nsDelNy = 0
		ORDER BY
			a.nsSeq ASC
	</select>
	
	<!-- shopMenuInsert - form 페이지 데이터 입력하기 -->
	<insert id="shopMenuInsert">
		INSERT INTO b_menu (
			meName, 
			meDesc, 
			meTime, 
			mePrice, 
			meCount, 
			meUseNy, 
			meDelNy, 
			b_shop_nsSeq
		) values (
		    #{meName},
		    #{meDesc},
		    #{meTime},
		    #{mePrice},
		    null,
		    #{meUseNy},
		    0,
		    #{b_shop_nsSeq}
		)
	</insert>
	
	<!--  shopDetail에서 Menu 리스트 띄우기 -->
	<select id="menuSelectList" resultMap="resultMapObj">
		SELECT 
			c.meSeq,
			c.meName, 
			c.meDesc, 
			c.meTime, 
			c.mePrice, 
			c.meCount, 
			c.meUseNy, 
			c.meDelNy, 
			c.b_shop_nsSeq
		FROM 
			b_menu AS c
			LEFT JOIN b_shop AS a ON c.b_shop_nsSeq = a.nsSeq
		WHERE 1 = 1
			AND c.b_shop_nsSeq = #{nsSeq}
		ORDER BY 
			c.meSeq ASC
	</select>
	
	<!-- shopDetail에서 booking, bookingMenu insert -->
	<!-- boSeq 값을 b_booking에 삽입한 후 b_bookingmenu에 전달하려면, MyBatis에서는 useGeneratedKeys를 설정하여 자동 생성된 boSeq 값을 가져올 수 있다. -->
	<insert id="shopBookingInsert" useGeneratedKeys="true" keyProperty="boSeq">
		INSERT INTO b_booking (
			boDate, 
			boTime, 
			boDeposit, 
			boTotalPrice, 
			boPayment, 
			boSettleDate, 
			boRegDate, 
			boEditdate,
			boDelNy, 
			b_user_usrSeq
		) values (
			#{boDate}, 
			#{boTime}, 
			30000, 
			#{boTotalPrice}, 
			null, 
			null, 
			now(), 
			now(), 
			0, 
			#{b_user_usrSeq}
		)
	</insert>
	<insert id="shopBookingMenuInsert" parameterType="map">
		<!-- 선택된 메뉴들의 meSeq값이 menuSeqs 리스트로 전달되어 shopBookingMenuInsert에서 각각의 menuSeq를 사용하여 b_bookingmenu테이블에 데이터를 삽입할 수 있다. -->
		INSERT INTO b_bookingmenu (
			bmUseNy, 
			bmDelNy, 
			b_booking_boSeq, 
			b_menu_meSeq
		) values 
		<foreach collection="menuSeqs" item="menuSeq" separator=",">
			(
				1,
				0,
				#{boSeq}, 
				#{menuSeq}
			)
		</foreach>
	</insert>
	
	<!-- shopPayment 페이지에 booking테이블 정보 출력 -->
	<select id="paymentBookingSelectOne" resultMap="resultMapObj" parameterType="String" resultType="map">
		SELECT
			f.boSeq,
		    c.usrSeq,
		    c.usrName,
		    c.usrPhone,
		    f.boDate,
		    f.boTime,
		    f.boDeposit,
		    f.boTotalPrice,
		    f.boPayment,
			f.boSettleDate,
			f.boRegDate
		FROM b_booking AS f
			LEFT JOIN b_user AS c
				ON f.b_user_usrSeq = c.usrSeq
		WHERE 1 = 1
			AND f.boSeq = #{boSeq}
	</select>
	
	<!-- shopPayment 페이지에 bookingmenu테이블 정보 출력 -->
	<select id="paymentBookingMenuSelectList" resultMap="resultMapObj" parameterType="String" resultType="map">
		SELECT
			e.meName,
		    e.mePrice
		FROM b_bookingmenu AS g
			LEFT JOIN b_menu AS e
				ON g.b_menu_meSeq = e.meSeq
			LEFT JOIN b_booking AS f
				ON g.b_booking_boSeq = f.boSeq
		WHERE 1 = 1 
			AND f.boSeq = #{boSeq}
	</select>
	
	<!-- shopPayment 페이지에 shop테이블 정보 출력 -->
	<!-- DISTINCT를 이용하여 쿼리가 특정칼럼들만 중복되지 않도록 보장하면서 중복을 제거한다. -->
	<select id="paymentShopSelectOne" resultMap="resultMapObj" parameterType="String" resultType="map">
		SELECT DISTINCT
			d.nsName,
		    d.nsAddr,
		    d.nsAddrdetail
		FROM b_bookingmenu AS g
			LEFT JOIN b_menu AS e
				ON g.b_menu_meSeq = e.meSeq
			LEFT JOIN b_shop AS d
				ON e.b_shop_nsSeq = d.nsSeq
			LEFT JOIN b_booking AS f
				ON g.b_booking_boSeq = f.boSeq
		WHERE 1 = 1 
			AND boSeq = #{boSeq}
	</select>
	
	<!-- 결제하면 결제방식이랑 결제일 업데이트되어야함 -->
	<update id="bookingUpdate">
	    UPDATE bears.b_booking
	    SET
	        boPayment = #{boPayment},
	        boSettleDate = now()
	    WHERE 1 = 1
	        AND boSeq = #{boSeq}
	</update>
	
	<!-- USR 메인 페이지에서 예약건수가 많은 샵 리스트 출력 -->
	<select id="bestBookingList" resultMap="resultMapObj">
		SELECT
			d.nsSeq,
			d.nsName,
			d.nsInfoWalk,
			d.nsInfoPrice,
			d.nsOpenTime,
			d.nsClosTime,
			d.nsMulti,
		    COUNT(DISTINCT b.boSeq) AS boSeqCount,
		    (select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 1) as mainImg1
<!-- 			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 2) as mainImg2,  -->
<!-- 			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 3) as subImg1,  -->
<!-- 			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 4) as subImg2,  -->
<!-- 			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 5) as subImg3,  -->
<!-- 			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 6) as subImg4,  -->
<!-- 			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 7) as subImg5,  -->
<!-- 			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 8) as subImg6,  -->
<!-- 			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 9) as subImg7,  -->
<!-- 			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 10) as subImg8,  -->
<!-- 			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 11) as subImg9, -->
<!-- 			(select aa.nsfPath from b_shopuploaded aa where 1=1 and aa.nsfPseq = d.nsSeq and aa.nsfOrder = 12) as subImg10 -->
		FROM b_bookingmenu AS a
			LEFT JOIN b_booking AS b
				ON a.b_booking_boSeq = b.boSeq
			LEFT JOIN b_menu AS c
				ON a.B_menu_meSeq = c.meSeq
			LEFT JOIN b_shop AS d
				ON c.b_shop_nsSeq = d.nsSeq
			GROUP BY d.nsSeq
			ORDER BY boSeqCount DESC
	</select>
	
	<!-- USR 메인 페이지에서 리뷰 리스트 출력 -->
	<select id="reviewList" resultMap="resultMapObj">
		SELECT
			a.reTitle, 
		    a.reContent, 
		    a.reId, 
		    a.reStar, 
		    a.reRegDate,
		    b.nsName
		FROM b_review AS a
			LEFT JOIN b_shop AS b
				ON a.b_shop_nsSeq = b.nsSeq
	</select>
	
	<!-- USR 예약내역 페이지 리스트 출력 -->
	<select id="userBookingSelectList" resultMap="resultMapObj">
		SELECT cc.* FROM(
			SELECT DISTINCT
				c.usrSeq,
				c.usrName,
				c.usrId,
				c.usrPhone,
				c.usrGrade,
				b.boSeq,
				b.boDate,
				b.boTime,
				b.boDeposit,
				b.boTotalPrice,
				b.boPayment,
				b.boSettleDate,
				b.boRegDate,
	            e.nsSeq,
	            e.nsName,
				e.nsTel,
				e.nsAddr,
				e.nsAddrdetail
			<include refid="userBookingSelectCommon"/>
	    	ORDER BY b.boSeq DESC
		) cc limit #{rowNumToShow} offset #{startRnumForMySql}
	</select>
	
	<!-- paging -->
	<sql id="userBookingSelectCommon">
		FROM b_bookingmenu AS a
			LEFT JOIN b_booking AS b
				ON a.b_booking_boSeq = b.boSeq
			LEFT JOIN b_user AS c
				ON b.b_user_usrSeq = c.usrSeq
			LEFT JOIN b_menu AS d
				ON a.b_menu_meSeq = d.meSeq
			LEFT JOIN b_shop AS e
				ON d.b_shop_nsSeq = e.nsSeq
		WHERE 1 = 1
			AND c.usrSeq = #{usrSeq}
	        AND b.boPayment IS NOT NULL
	        AND b.boSettleDate IS NOT NULL
	</sql>
	
	<select id="userBookingSelectOneCount">
	    SELECT COUNT(DISTINCT b.boSeq)
	    <include refid="userBookingSelectCommon"/>
	</select>

	<!-- 예약내역 상세 페이지 -->
	<!-- 예약 정보 + 예약자(회원) 정보 -->
	<select id="userBookingDetailSelectOne" resultMap="resultMapObj">
		SELECT
			a.boSeq, 
			a.boDate, 
			a.boTime, 
			a.boDeposit, 
			a.boTotalPrice, 
			a.boPayment, 
			a.boSettleDate, 
			a.boRegDate, 
			a.boEditdate, 
			a.boDelNy, 
			b.usrName, 
			b.usrPhone
		FROM b_booking AS a
			LEFT JOIN b_user AS b
				ON a.b_user_usrSeq = b.usrSeq
		WHERE 1 = 1
			AND a.boSeq = #{boSeq}
	</select>
	<!-- 샵 정보 -->	
	<select id="shopBookingDetailSelectOne" resultMap="resultMapObj">
		SELECT DISTINCT
			d.nsName,
			d.nsAddr,
			d.nsAddrDetail
		FROM b_bookingmenu AS a
			LEFT JOIN b_booking AS b
				ON a.b_booking_boSeq = b.boSeq
			LEFT JOIN b_menu AS c
				ON a.b_menu_meSeq = c.meSeq
			LEFT JOIN b_shop AS d
				ON c.b_shop_nsSeq = d.nsSeq
		WHERE 1 = 1
			AND b.boSeq = #{boSeq}
	</select>
	<!-- 메뉴 정보 -->
	<select id="menuBookingDetailSelectList" resultMap="resultMapObj">
		SELECT
			b.meSeq,
			b.meName,
			b.mePrice
		FROM b_bookingmenu AS a
			LEFT JOIN b_menu AS b
				ON a.b_menu_meSeq = b.meSeq
			LEFT JOIN b_booking AS c
				ON a.b_booking_boSeq = c.boSeq
		WHERE 1 = 1
			AND c.boSeq = #{boSeq}
	</select>

	<!-- 샵 상세페이지 리뷰 insert -->
	<insert id="reviewInsert">
		INSERT INTO b_review (
			reTitle, 
			reContent, 
			reId, 
			reStar, 
			reRegDate, 
			reEditDate, 
			reDelNy, 
			B_user_usrSeq, 
			B_shop_nsSeq
		) VALUES (
			#{reTitle},
			#{reContent},
			#{reId}, 
			#{reStar}, 
			now(), 
			now(), 
			0, 
			#{B_user_usrSeq}, 
			#{B_shop_nsSeq}
		)
	</insert>
	
</mapper>